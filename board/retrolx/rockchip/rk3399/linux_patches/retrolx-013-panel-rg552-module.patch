--- /dev/null	2022-01-10 11:55:58.004781700 +0100
+++ b/drivers/gpu/drm/panel/panel-anbernic-rg552.c	2022-01-10 21:39:18.236813273 +0100
@@ -0,0 +1,399 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Anbernic RG552 display panel driver
+ *
+ * Copyright (C) 2021, Romain Tisserand <romain.tisserand@gmail.com>
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/media-bus-format.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+struct panel_rg552_panel_info {
+	const struct drm_display_mode *display_mode;
+	u32 bus_format, bus_flags;
+};
+
+struct panel_rg552 {
+	struct drm_panel panel;
+	struct device *dev;
+	struct mipi_dsi_device *dsi;
+	struct regulator *supply;
+	const struct panel_rg552_panel_info *panel_info;
+	struct gpio_desc *reset_gpio;
+	struct gpio_desc *enable_gpio;
+	struct gpio_desc *enable1_gpio;
+	enum drm_panel_orientation orientation;
+	bool prepared;
+};
+
+
+static inline struct panel_rg552 *to_panel_rg552(struct drm_panel *panel)
+{
+	return container_of(panel, struct panel_rg552, panel);
+}
+
+#define dsi_dcs_write_seq(dsi, cmd, seq...) do {				\
+		static const u8 b[] = { cmd, seq };						\
+		int ret;												\
+		ret = mipi_dsi_dcs_write_buffer(dsi, b, ARRAY_SIZE(b));	\
+		if (ret < 0) 											\
+		{														\
+			dev_err(ctx->dev, "Init sequence error %d\n", ret);	\
+			goto err_disable_regulator;							\
+		}														\
+	} while (0)
+
+static int panel_rg552_prepare(struct drm_panel *panel)
+{
+	struct panel_rg552 *ctx = to_panel_rg552(panel);
+	int err;
+
+	if (ctx->prepared)
+		return 0;
+
+	err = regulator_enable(ctx->supply);
+	if (err) {
+		dev_err(panel->dev, "Failed to enable power supply: %d\n", err);
+		return err;
+	}
+
+	dev_dbg(ctx->dev, "Resetting the panel\n");
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+
+	msleep(20);
+
+	gpiod_set_value_cansleep(ctx->enable1_gpio, 0);
+	gpiod_set_value_cansleep(ctx->enable_gpio, 0);
+
+	msleep(60);
+
+	gpiod_set_value_cansleep(ctx->enable_gpio, 1);
+
+	msleep(20);
+
+	gpiod_set_value_cansleep(ctx->enable1_gpio, 1);
+
+	msleep(20);
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+
+	msleep(20);
+
+	/*
+	 * Init sequence was supplied by the panel vendor with minimal
+	 * documentation.
+	 */
+	dsi_dcs_write_seq(ctx->dsi, 0xb9, 0xff, 0x83, 0x99);
+	dsi_dcs_write_seq(ctx->dsi, 0xe0, 0x01, 0x13, 0x17, 0x34, 0x38, 0x3e, 0x2c,
+			  0x47, 0x07, 0x0c, 0x0f, 0x12, 0x14, 0x11, 0x13, 0x12,
+			  0x18, 0x0b, 0x17, 0x07, 0x13, 0x02, 0x14, 0x18, 0x32,
+			  0x37, 0x3d, 0x29, 0x43, 0x07, 0x0e, 0x0c, 0x0f, 0x11,
+			  0x10, 0x12, 0x12, 0x18, 0x0c, 0x17, 0x07, 0x13);
+	dsi_dcs_write_seq(ctx->dsi, 0xb1, 0x00, 0x7c, 0x38, 0x35, 0x99, 0x09, 0x22,
+			  0x22, 0x72, 0xf2, 0x68, 0x58);
+	dsi_dcs_write_seq(ctx->dsi, 0xd2, 0x99);
+	dsi_dcs_write_seq(ctx->dsi, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30,
+			  0x00, 0x10, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x07,
+			  0x03, 0x00, 0x00, 0x00, 0x05, 0x08);
+	dsi_dcs_write_seq(ctx->dsi, 0xd5, 0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x00,
+			  0x00, 0x00, 0x00, 0x19, 0x00, 0x18, 0x00, 0x21, 0x20,
+			  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x32, 0x32, 0x31, 0x31, 0x30, 0x30);
+	dsi_dcs_write_seq(ctx->dsi, 0xd6, 0x40, 0x40, 0x02, 0x03, 0x00, 0x01, 0x40,
+			  0x40, 0x40, 0x40, 0x18, 0x40, 0x19, 0x40, 0x20, 0x21,
+			  0x40, 0x18, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
+			  0x40, 0x32, 0x32, 0x31, 0x31, 0x30, 0x30);
+	dsi_dcs_write_seq(ctx->dsi, 0xd8, 0x28, 0x2a, 0x00, 0x2a, 0x28, 0x02, 0xc0,
+			  0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00,
+			  0x2a, 0x28, 0x02, 0xc0, 0x2a);
+	dsi_dcs_write_seq(ctx->dsi, 0xb2, 0x00, 0x80, 0x10, 0x7f, 0x05, 0x01, 0x23,
+			  0x4d, 0x21, 0x01);
+	dsi_dcs_write_seq(ctx->dsi, 0xb4, 0x00, 0x3f, 0x00, 0x41, 0x00, 0x3d, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x01, 0x02,
+			  0x05, 0x40, 0x00, 0x00, 0x3a, 0x00, 0x41, 0x00, 0x3d,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x01,
+			  0x02, 0x05, 0x00, 0x00, 0x00, 0x3a);
+	dsi_dcs_write_seq(ctx->dsi, 0xba, 0x03, 0x82, 0xa0, 0xe5);
+
+	/* Panel is operational 120 msec after reset */
+	msleep(120);
+
+	dev_err(panel->dev, "Panel init sequence done\n");
+
+	err = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+	if (err < 0) {
+		dev_err(ctx->dev, "Failed to exit sleep mode: %d\n", err);
+		goto err_disable_regulator;
+	}
+
+	msleep(80);
+
+	err = mipi_dsi_dcs_set_display_on(ctx->dsi);
+	if (err < 0) {
+		dev_err(ctx->dev, "Failed to set display on: %d\n", err);
+		goto err_disable_regulator;
+	}
+
+	msleep(80);
+
+	ctx->prepared = true;
+
+	return 0;
+
+err_disable_regulator:
+	regulator_disable(ctx->supply);
+	dev_err(panel->dev, "rg552 panel prepare err_disable_regulator\n");
+	return err;
+}
+
+static int panel_rg552_unprepare(struct drm_panel *panel)
+{
+	struct panel_rg552 *priv = to_panel_rg552(panel);
+	int ret;
+
+	if (!priv->prepared)
+		return 0;
+
+	ret = mipi_dsi_dcs_set_display_off(priv->dsi);
+	if (ret < 0)
+		dev_err(panel->dev, "failed to set display off: %d\n", ret);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(priv->dsi);
+	if (ret < 0) {
+		dev_err(panel->dev, "failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+
+	gpiod_direction_output(priv->reset_gpio, 1);
+	gpiod_direction_output(priv->enable_gpio, 0);
+
+	regulator_disable(priv->supply);
+
+	priv->prepared = false;
+
+	return 0;
+}
+
+static int panel_rg552_enable(struct drm_panel *panel)
+{
+	struct panel_rg552 *priv = to_panel_rg552(panel);
+	int err;
+
+	err = mipi_dsi_dcs_set_display_on(priv->dsi);
+	if (err) {
+		dev_err(panel->dev, "Unable to enable display: %d\n", err);
+		return err;
+	}
+
+	if (panel->backlight) {
+		/* Wait for the picture to be ready before enabling backlight */
+		usleep_range(10000, 20000);
+	}
+
+	return 0;
+}
+
+static int panel_rg552_disable(struct drm_panel *panel)
+{
+	struct panel_rg552 *priv = to_panel_rg552(panel);
+	int err;
+
+	err = mipi_dsi_dcs_set_display_off(priv->dsi);
+	if (err) {
+		dev_err(panel->dev, "Unable to disable display: %d\n", err);
+		return err;
+	}
+
+	return 0;
+}
+
+static int panel_rg552_get_modes(struct drm_panel *panel,
+			     struct drm_connector *connector)
+{
+	struct panel_rg552 *priv = to_panel_rg552(panel);
+	const struct panel_rg552_panel_info *panel_info = priv->panel_info;
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, panel_info->display_mode);
+	if (!mode)
+	{
+		dev_err(panel->dev, "rg552 panel drm_mode_duplicate failed\n");
+		return -ENOMEM;
+	}
+
+	mode->type = DRM_MODE_TYPE_DRIVER;
+	mode->type |= DRM_MODE_TYPE_PREFERRED;
+	drm_mode_set_name(mode);
+
+	drm_mode_probed_add(connector, mode);
+
+	drm_connector_set_panel_orientation(connector, priv->orientation);
+
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_display_info_set_bus_formats(&connector->display_info,
+					 &panel_info->bus_format, 1);
+	connector->display_info.bus_flags = panel_info->bus_flags;
+
+
+	return 1;
+}
+
+static const struct drm_panel_funcs panel_rg552_funcs = {
+	.prepare	= panel_rg552_prepare,
+	.unprepare	= panel_rg552_unprepare,
+	.enable		= panel_rg552_enable,
+	.disable	= panel_rg552_disable,
+	.get_modes	= panel_rg552_get_modes,
+};
+
+static int panel_rg552_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct panel_rg552 *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx) {
+		dev_err(dev, "Failed to init probe\n");
+		return -ENOMEM;
+	}
+
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset_gpio)) {
+		dev_err(dev, "Failed to get reset GPIO\n");
+		return PTR_ERR(ctx->reset_gpio);
+	}
+
+	ctx->enable1_gpio = devm_gpiod_get_optional(dev, "a_enable", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->enable1_gpio)) {
+		dev_err(dev, "cannot get a_enable gpio\n");
+		return PTR_ERR(ctx->enable1_gpio);
+	}
+
+	ctx->enable_gpio = devm_gpiod_get_optional(dev, "enable", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->enable_gpio)) {
+		dev_err(dev, "cannot get enable gpio\n");
+		return PTR_ERR(ctx->enable_gpio);
+	}
+
+	ctx->supply = devm_regulator_get(dev, "vcc");
+	if (IS_ERR(ctx->supply)) {
+		ret = PTR_ERR(ctx->supply);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Failed to request supply regulator: %d\n", ret);
+		return ret;
+	}
+
+	ctx->dsi = dsi;
+	ctx->dev = dev;
+
+	ret = of_drm_get_panel_orientation(dev->of_node, &ctx->orientation);
+	if (ret < 0) {
+		dev_err(dev, "%pOF: failed to get orientation %d\n", dev->of_node, ret);
+		return ret;
+	}
+
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	ctx->panel_info = of_device_get_match_data(dev);
+	if (!ctx->panel_info)
+		return -EINVAL;
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST |
+              MIPI_DSI_MODE_LPM | MIPI_DSI_MODE_NO_EOT_PACKET |
+              MIPI_DSI_CLOCK_NON_CONTINUOUS;
+
+	drm_panel_init(&ctx->panel, dev, &panel_rg552_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret < 0) {
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Failed to attach backlight\n");
+		return ret;
+	}
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret) {
+		dev_err(dev, "Failed to attach panel\n");
+		drm_panel_remove(&ctx->panel);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int panel_rg552_remove(struct mipi_dsi_device *dsi)
+{
+	struct panel_rg552 *priv = mipi_dsi_get_drvdata(dsi);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&priv->panel);
+
+	drm_panel_disable(&priv->panel);
+	drm_panel_unprepare(&priv->panel);
+
+	return 0;
+}
+
+static const struct drm_display_mode rg552_mode = {
+	/* 60 Hz */
+	.clock = 149000,
+	.hdisplay = 1152,
+	.hsync_start = 1152 + 64,
+	.hsync_end = 1152 + 64 + 4,
+	.htotal = 1152 + 64 + 4 + 32,
+	.vdisplay = 1920,
+	.vsync_start = 1920 + 56,
+	.vsync_end = 1920 + 56 + 3,
+	.vtotal = 1920 + 56 + 3 + 6,
+	.width_mm = 69,
+	.height_mm = 116,
+	.flags = DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+};
+
+static const struct panel_rg552_panel_info rg552_panel_info = {
+	.display_mode = &rg552_mode,
+	.bus_format = MEDIA_BUS_FMT_RGB888_1X24,
+	.bus_flags = DRM_BUS_FLAG_DE_LOW | DRM_BUS_FLAG_PIXDATA_SAMPLE_NEGEDGE,
+};
+
+static const struct of_device_id panel_rg552_of_match[] = {
+	{ .compatible = "anbernic,panel-rg552", .data = &rg552_panel_info },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, panel_rg552_of_match);
+
+static struct mipi_dsi_driver panel_rg552_driver = {
+	.driver = {
+		.name = "panel_rg552",
+		.of_match_table = panel_rg552_of_match,
+	},
+	.probe = panel_rg552_probe,
+	.remove = panel_rg552_remove,
+};
+module_mipi_dsi_driver(panel_rg552_driver);
+
+MODULE_AUTHOR("Romain Tisserand <romain.tisserand@gmail.com>");
+MODULE_LICENSE("GPL v2");
